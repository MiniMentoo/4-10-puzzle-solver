/**Generates every possible iteration of 4 numbers and their operators,
 * then checks to see if each iteration equals the goal (10).
 *
 * @author Mostafa A
 */
public class EquationGenerator {
    RevPolishCalc calc;
    char[] ops = {'+', '-', '*', '/'};
    double GOAL = 10;

    /**Constructor for EquationGenerator, initiates the calculator.
     * GOAL and ops are constants for now.
     *
     */
    public EquationGenerator() {
        calc = new RevPolishCalc();
    }

    /**Generates all 24 permutations of 4 numbers, and passes each one into generateOps.
     * @param num an Array of the 4 numbers from 1-9 that make up the puzzle and 3 empty spaces for ops.
     * @return A string of every solution in Postfix seperated by a newline.
     */
    public String solve(char[] num) {
        char swap;
        StringBuilder builder = new StringBuilder();
        for(int i = 0; i < 24; i++) {
            // permutations generated by swapping two numbers in the array depending on what i is
            if ( i == 0 ) {
                //no swap for the first loop
            } else if (i == 18) { //bit clumsy but i won't iterate over last 6 without a specific type of loop
                swap = num[2];
                num[2] = num[0];
                num[0] = swap;
            }
            else if ( i % 6 == 0 ) {
                swap = num[0];
                num[0] = num[3];
                num[3] = swap;
            } else if ( i % 2 == 0 ) {
                swap = num[1];
                num[1] = num[3];
                num[3] = swap;
            } else {
                swap = num[2];
                num[2] = num[3];
                num[3] = swap;
            }
            generateOps(num, builder);
        }
        return builder.toString();
    }

    /**Generates all possible combinations of 3 operators for the array provided and calls equalsTen on it
     * @param num a permutation of the original num array with 4 numbers 1-9 and 3 empty spaces
     * @param builder the StringBuilder that will have every solution added to it, seperated by a newline
     */
    public void generateOps(char[] num, StringBuilder builder) {
        for (int j = 0; j < 4; j++) {
            for (int k = 0; k < 4; k++) {
                for (int l = 0; l < 4; l++) {
                    num[4] = ops[j];
                    num[5] = ops[k];
                    num[6] = ops[l];
                    String s = num[0] + " " + num[1] + " " + num[2] + " " + num[3] + " " + num[4] + " " + num[5] + " " + num[6];
                    if (equalsTen(s)) {
                        builder.append(s);
                        builder.append('\n');
                    }
                }
            }
        }
    }

    /**Evaluates if a calculation is equal to the GOAL in the class (10)
     *
     * @param sum a String representing a calculation written in POSTFIX, seperated by spaces.
     * @return true is the calculation equals the GOAL and false if not or if the string is not in the correct format.
     */
    public boolean equalsTen(String sum) {
        boolean b = false;
        try {
            b = calc.evaluate(sum) == GOAL;
        } catch (InvalidExpression e) {
            e.printStackTrace();
        }
        return b;
    }
}
